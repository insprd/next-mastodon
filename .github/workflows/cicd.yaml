name: CI and Deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  release:
    types: [published]

jobs:
  Lint-and-Tests:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '19.x'
      - name: Install pnpm
        run: npm install -g pnpm
      - name: Install dependencies
        run: pnpm install
      - name: Lint
        run: pnpm lint
      - name: Test
        run: pnpm tests
      - name: Check for unused dependencies
        run: |
        OUTPUT=$(pnpm exec depcheck --ignores="@types/*,typescript" --json)
        if [ "$(echo $OUTPUT | jq '.dependencies + .devDependencies | length')" -gt 0 ]; then
          echo "Unused dependencies found:"
          echo $OUTPUT | jq
          exit 1
        fi

  Deploy-Preview:
    runs-on: ubuntu-latest
    needs: [Lint-and-Tests]
    if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository
    env:
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
    steps:
      - uses: actions/checkout@v2
      
      - name: Update Version in Vercel
        run: |
          VERSION_TAG=${{ github.event.release.tag_name }}
          echo "Updating version to $VERSION_TAG"
          curl -X PATCH "https://api.vercel.com/v8/projects/${{ secrets.VERCEL_PROJECT_ID }}/env/NEXT_PUBLIC_APP_VERSION" \
          -H "Authorization: Bearer ${{ secrets.VERCEL_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d "{\"value\":\"$VERSION_TAG\"}"

      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '19.x'
      - name: Install pnpm
        run: npm install -g pnpm
      - name: Install Vercel CLI
        run: pnpm add vercel@latest
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}

  Deploy-Production:
    runs-on: ubuntu-latest
    needs: [Lint-and-Tests]
    if: github.event_name == 'release'
    env:
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
    steps:
      - uses: actions/checkout@v2
      - name: Update Version in Vercel
        run: |
          VERSION_TAG=${{ github.event.release.tag_name }}
          echo "Updating version to $VERSION_TAG"
          curl -X PATCH "https://api.vercel.com/v8/projects/${{ secrets.VERCEL_PROJECT_ID }}/env/NEXT_PUBLIC_APP_VERSION" \
          -H "Authorization: Bearer ${{ secrets.VERCEL_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d "{\"value\":\"$VERSION_TAG\"}"
      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '19.x'
      - name: Install pnpm
        run: npm install -g pnpm
      - name: Install Vercel CLI
        run: pnpm add vercel@latest
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
